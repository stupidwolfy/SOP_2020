{
  "swagger": "2.0",
  "info": {
    "description": "KMITL Student API",
    "version": "1.0.1",
    "title": "Simple Student API",
    "contact": {
      "email": "you@your-company.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/SOP_2020/KMITL-Student/1.0.1",
  "tags": [
    {
      "name": "Course",
      "description": "Couse in KMITL"
    },
    {
      "name": "Evaluation",
      "description": "Evaluation in KMITL"
    },
    {
      "name": "Finance",
      "description": "For handle finance"
    },
    {
      "name": "Form_KM",
      "description": "Work with form"
    },
    {
      "name": "Grade",
      "description": "View grade"
    },
    {
      "name": "Lecture",
      "description": "Manage lecture"
    },
    {
      "name": "Student",
      "description": "Student in KMITL"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/course": {
      "get": {
        "tags": [
          "Course"
        ],
        "summary": "Searches course",
        "parameters": [
          {
            "name": "courseId",
            "in": "query",
            "description": "Pass course id",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Course matching",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Course"
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      },
      "post": {
        "tags": [
          "Course"
        ],
        "summary": "Add new course",
        "description": "Add course to db",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "course",
            "description": "Course to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Course"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Course created"
          },
          "400": {
            "description": "Invalid input, object invalid"
          }
        }
      }
    },
    "/course/{course_id}": {
      "get": {
        "tags": [
          "Course"
        ],
        "summary": "Find Course ID.",
        "description": "Find Course ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "Course ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          },
          "400": {
            "description": "Course not found"
          }
        }
      },
      "put": {
        "tags": [
          "Course"
        ],
        "summary": "Update Course",
        "description": "Update Course",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "The Course ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Update information",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          },
          "400": {
            "description": "Can't update informations"
          }
        }
      },
      "delete": {
        "tags": [
          "Course"
        ],
        "summary": "Delete Course",
        "description": "Delete Course",
        "parameters": [
          {
            "name": "course_id",
            "in": "path",
            "description": "The Course ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete information"
          },
          "400": {
            "description": "Please try again"
          }
        }
      }
    },
    "/student": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Searches student",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Student matching",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Student"
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      },
      "post": {
        "tags": [
          "Student"
        ],
        "summary": "Add new student",
        "description": "Add student to db",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "student",
            "description": "Student to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Student"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Student created"
          },
          "400": {
            "description": "Invalid input, object invalid"
          }
        }
      }
    },
    "/student/{student_id}": {
      "get": {
        "tags": [
          "Course"
        ],
        "summary": "Find Student ID.",
        "description": "Find Student ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "student_id",
            "in": "path",
            "description": "Course ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Student"
            }
          },
          "400": {
            "description": "Course not found"
          }
        }
      },
      "put": {
        "tags": [
          "Student"
        ],
        "summary": "Update Student",
        "description": "Update Student",
        "parameters": [
          {
            "name": "student_id",
            "in": "path",
            "description": "The Student ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Update information",
            "schema": {
              "$ref": "#/definitions/Student"
            }
          },
          "400": {
            "description": "Can't update informations"
          }
        }
      },
      "delete": {
        "tags": [
          "Student"
        ],
        "summary": "Delete Student",
        "description": "Delete Student",
        "parameters": [
          {
            "name": "student_id",
            "in": "path",
            "description": "The Student ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete information"
          },
          "400": {
            "description": "Please try again"
          }
        }
      }
    },
    "/lecturer": {
      "get": {
        "tags": [
          "Lecture"
        ],
        "summary": "Searches lecturer",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Lecturer matching",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Lecturer"
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      },
      "post": {
        "tags": [
          "Lecture"
        ],
        "summary": "Add lecturer",
        "description": "Add driver to db",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "inventoryItem",
            "description": "Inventory item to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Lecturer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Add Sucessful"
          },
          "400": {
            "description": "invalid input, object invalid"
          }
        }
      }
    },
    "/lecturer/{lecturer_id}": {
      "get": {
        "tags": [
          "Lecture"
        ],
        "summary": "Find Lecture ID.",
        "description": "Find Lecture ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "lecturer_id",
            "in": "path",
            "description": "Lecture ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Lecturer"
            }
          },
          "400": {
            "description": "Course not found"
          }
        }
      },
      "put": {
        "tags": [
          "Lecture"
        ],
        "summary": "Update Lecture",
        "description": "Update Lecture",
        "parameters": [
          {
            "name": "lecturer_id",
            "in": "path",
            "description": "The Lecture ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Update information",
            "schema": {
              "$ref": "#/definitions/Lecturer"
            }
          },
          "400": {
            "description": "Can't update informations"
          }
        }
      },
      "delete": {
        "tags": [
          "Lecture"
        ],
        "summary": "Delete Lecture",
        "description": "Delete Lecture",
        "parameters": [
          {
            "name": "lecturer_id",
            "in": "path",
            "description": "The Lecture ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete information"
          },
          "400": {
            "description": "Please try again"
          }
        }
      }
    },
    "/finance": {
      "post": {
        "tags": [
          "Finance"
        ],
        "summary": "Add new finance",
        "description": "Add finance to db",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "finance",
            "description": "Finance to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Finance"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Finance created"
          },
          "400": {
            "description": "Invalid input, object invalid"
          }
        }
      }
    },
    "/finance/{finance_id}": {
      "get": {
        "tags": [
          "Finance"
        ],
        "summary": "Find Finance ID.",
        "description": "Find Finance ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "finance_id",
            "in": "path",
            "description": "Finance ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Finance"
            }
          },
          "400": {
            "description": "Finance not found"
          }
        }
      }
    },
    "/evaluation": {
      "post": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Add new evaluation",
        "description": "Add evaluation to db",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "evaluation",
            "description": "Evaluation to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Evaluation created"
          },
          "400": {
            "description": "Invalid input, object invalid"
          }
        }
      }
    },
    "/grade": {
      "post": {
        "tags": [
          "Grade"
        ],
        "summary": "Add new grade",
        "description": "Add grade to db",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "grade",
            "description": "Grade to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Grade"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Grade created"
          },
          "400": {
            "description": "Invalid input, object invalid"
          }
        }
      }
    },
    "/grade/{grade_id}": {
      "get": {
        "tags": [
          "Grade"
        ],
        "summary": "Find Grade ID.",
        "description": "Find Grade ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "grade_id",
            "in": "path",
            "description": "Grade ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Grade"
            }
          },
          "400": {
            "description": "Grade not found"
          }
        }
      }
    },
    "/form_km": {
      "get": {
        "tags": [
          "Form_KM"
        ],
        "summary": "Get form",
        "description": "Return form",
        "parameters": [],
        "responses": {
          "200": {
            "description": "form",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Form_KM"
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      },
      "post": {
        "tags": [
          "Form_KM"
        ],
        "summary": "Send form",
        "description": "Add form to db",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "form",
            "description": "Form to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Form_KM"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Form created"
          },
          "400": {
            "description": "Invalid input, object invalid"
          }
        }
      }
    }
  },
  "definitions": {
    "Lecturer": {
      "type": "object",
      "required": [
        "course",
        "date",
        "id",
        "student",
        "subject_name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "subject_name": {
          "type": "string",
          "example": "SOP"
        },
        "date": {
          "type": "string",
          "example": "monday_9:00"
        },
        "student": {
          "$ref": "#/definitions/Student"
        },
        "course": {
          "$ref": "#/definitions/Course"
        }
      }
    },
    "Finance": {
      "type": "object",
      "required": [
        "id",
        "status",
        "student"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "boolean",
          "example": true
        },
        "student": {
          "$ref": "#/definitions/Student"
        }
      }
    },
    "Student": {
      "type": "object",
      "required": [
        "firstname",
        "id",
        "lastname",
        "studentID",
        "year"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
        },
        "firstname": {
          "type": "string",
          "example": "Krittanai"
        },
        "lastname": {
          "type": "string",
          "example": "Pahonkarn"
        },
        "studentID": {
          "type": "integer",
          "format": "int64",
          "example": 61070003
        },
        "year": {
          "type": "integer",
          "format": "int64",
          "example": 2561
        }
      }
    },
    "Course": {
      "type": "object",
      "required": [
        "courseID",
        "id",
        "subject"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
        },
        "subject": {
          "type": "string",
          "example": "Service oriented programming"
        },
        "courseID": {
          "type": "string",
          "example": "06016325"
        }
      }
    },
    "Evaluation": {
      "type": "object",
      "required": [
        "course",
        "data",
        "id",
        "student"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "boolean",
          "example": true
        },
        "student": {
          "$ref": "#/definitions/Student"
        },
        "course": {
          "$ref": "#/definitions/Course"
        }
      }
    },
    "Grade": {
      "type": "object",
      "required": [
        "course",
        "grade",
        "id",
        "student"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
        },
        "student": {
          "$ref": "#/definitions/Student"
        },
        "course": {
          "$ref": "#/definitions/Course"
        },
        "grade": {
          "type": "string",
          "example": "A"
        }
      }
    },
    "Form_KM": {
      "type": "object",
      "required": [
        "data",
        "id",
        "student"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "string",
          "example": "example"
        },
        "student": {
          "$ref": "#/definitions/Student"
        }
      }
    }
  }
}